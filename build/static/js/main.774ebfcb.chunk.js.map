{"version":3,"sources":["components/Note.js","components/Notification.js","services/notes.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","Notification","message","request","axios","get","nonExisting","id","date","then","response","data","concat","newObject","post","put","Footer","style","backgroundColor","color","fontStyle","fontSize","paddingBottom","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","noteService","initialNotes","notesToShow","filter","map","key","find","n","changedNote","returnedNote","catch","error","setTimeout","toggleImportanceOf","onSubmit","event","preventDefault","noteObject","Date","toISOString","Math","random","value","onChange","console","log","target","type","ReactDOM","render","document","getElementById"],"mappings":"4NAaeA,EAXF,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,iBACdC,EAAQF,EAAKG,UAAY,qBAAuB,iBAEtD,OACE,wBAAIC,UAAU,QACXJ,EAAKK,QACN,4BAAQC,QAASL,GAAmBC,KCC3BK,EAPM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACtB,OAAgB,OAAZA,EACK,KAGF,yBAAKJ,UAAU,SAASI,I,gBCiBlB,EArBA,WACb,IAAMC,EAAUC,IAAMC,IAHR,cAIRC,EAAc,CAClBC,GAAI,IACJR,QAAS,mCACTS,KAAM,2BACNX,WAAW,GAEb,OAAOM,EAAQM,MAAK,SAACC,GAAD,OAAcA,EAASC,KAAKC,OAAON,OAa1C,EAVA,SAACO,GAEd,OADgBT,IAAMU,KAdR,aAcsBD,GACrBJ,MAAK,SAACC,GAAD,OAAcA,EAASC,SAQ9B,EALA,SAACJ,EAAIM,GAElB,OADgBT,IAAMW,IAAN,UAnBF,aAmBE,YAAwBR,GAAMM,GAC/BJ,MAAK,SAACC,GAAD,OAAcA,EAASC,SChBvCK,EAAS,WAQb,OACE,yBAAKC,MARa,CAClBC,gBAAiB,QACjBC,MAAO,QACPC,UAAW,SACXC,SAAU,GACVC,cAAe,KAIb,6BACA,uGAuFSC,EAhFH,WAAO,IAAD,EACUC,mBAAS,IADnB,mBACTC,EADS,KACFC,EADE,OAEcF,mBAAS,IAFvB,mBAETG,EAFS,KAEAC,EAFA,OAGcJ,oBAAS,GAHvB,mBAGTK,EAHS,KAGAC,EAHA,OAIwBN,mBAAS,MAJjC,mBAITO,EAJS,KAIKC,EAJL,KAMhBC,qBAAU,WACRC,IAAqBzB,MAAK,SAAC0B,GACzBT,EAASS,QAEV,IAEH,IAuCMC,EAAcP,EAAUJ,EAAQA,EAAMY,QAAO,SAAC3C,GAAD,OAAUA,EAAKG,aAElE,OACE,6BACE,qCACA,kBAAC,EAAD,CAAcK,QAAS6B,IACvB,6BACE,4BAAQ/B,QAAS,kBAAM8B,GAAYD,KAAnC,QACQA,EAAU,YAAc,QAGlC,4BACGO,EAAYE,KAAI,SAAC5C,GAAD,OACf,kBAAC,EAAD,CACE6C,IAAK7C,EAAKa,GACVb,KAAMA,EACNC,iBAAkB,kBAzCD,SAACY,GAC1B,IAAMb,EAAO+B,EAAMe,MAAK,SAACC,GAAD,OAAOA,EAAElC,KAAOA,KAClCmC,EAAW,2BAAQhD,GAAR,IAAcG,WAAYH,EAAKG,YAEhDqC,EACU3B,EAAImC,GACXjC,MAAK,SAACkC,GACLjB,EAASD,EAAMa,KAAI,SAAC5C,GAAD,OAAWA,EAAKa,KAAOA,EAAKb,EAAOiD,SAEvDC,OAAM,SAACC,GACNb,EAAgB,SAAD,OACJtC,EAAKK,QADD,sCAGf+C,YAAW,WACTd,EAAgB,QACf,KACHN,EAASD,EAAMY,QAAO,SAACI,GAAD,OAAOA,EAAElC,KAAOA,SAyBVwC,CAAmBrD,EAAKa,WAItD,0BAAMyC,SA3DM,SAACC,GACfA,EAAMC,iBACN,IAAMC,EAAa,CACjBpD,QAAS4B,EACTnB,MAAM,IAAI4C,MAAOC,cACjBxD,UAAWyD,KAAKC,SAAW,IAG7BrB,EAAmBiB,GAAY1C,MAAK,SAACkC,GACnCjB,EAASD,EAAMb,OAAO+B,IACtBf,EAAW,SAkDT,2BAAO4B,MAAO7B,EAAS8B,SA1BJ,SAACR,GACxBS,QAAQC,IAAIV,EAAMW,OAAOJ,OACzB5B,EAAWqB,EAAMW,OAAOJ,UAyBpB,4BAAQK,KAAK,UAAb,SAEF,kBAAC,EAAD,Q,MC7FNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.774ebfcb.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Note = ({ note, toggleImportance }) => {\r\n  const label = note.important ? \"make not important\" : \"make important\";\r\n\r\n  return (\r\n    <li className=\"note\">\r\n      {note.content}\r\n      <button onClick={toggleImportance}>{label}</button>\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default Note;\r\n","import React from \"react\";\r\n\r\nconst Notification = ({ message }) => {\r\n  if (message === null) {\r\n    return null;\r\n  }\r\n\r\n  return <div className=\"error\">{message}</div>;\r\n};\r\nexport default Notification;\r\n","import axios from \"axios\";\r\nconst baseUrl = \"/api/notes\";\r\n\r\nconst getAll = () => {\r\n  const request = axios.get(baseUrl);\r\n  const nonExisting = {\r\n    id: 10000,\r\n    content: \"This note is not saved to server\",\r\n    date: \"2019-05-30T17:30:31.098Z\",\r\n    important: true,\r\n  };\r\n  return request.then((response) => response.data.concat(nonExisting));\r\n};\r\n\r\nconst create = (newObject) => {\r\n  const request = axios.post(baseUrl, newObject);\r\n  return request.then((response) => response.data);\r\n};\r\n\r\nconst update = (id, newObject) => {\r\n  const request = axios.put(`${baseUrl}/${id}`, newObject);\r\n  return request.then((response) => response.data);\r\n};\r\n\r\nexport default { getAll, create, update };\r\n","import React, { useState, useEffect } from \"react\";\nimport Note from \"./components/Note\";\nimport Notification from \"./components/Notification\";\nimport noteService from \"./services/notes\";\n\nconst Footer = () => {\n  const footerStyle = {\n    backgroundColor: \"black\",\n    color: \"green\",\n    fontStyle: \"italic\",\n    fontSize: 16,\n    paddingBottom: 10,\n  };\n  return (\n    <div style={footerStyle}>\n      <br />\n      <em>\n        Note app, Department of Computer Science, University of Helsinki 2020\n      </em>\n    </div>\n  );\n};\n\nconst App = () => {\n  const [notes, setNotes] = useState([]);\n  const [newNote, setNewNote] = useState(\"\");\n  const [showAll, setShowAll] = useState(true);\n  const [errorMessage, setErrorMessage] = useState(null);\n\n  useEffect(() => {\n    noteService.getAll().then((initialNotes) => {\n      setNotes(initialNotes);\n    });\n  }, []);\n\n  const addNote = (event) => {\n    event.preventDefault();\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() < 0.5,\n    };\n\n    noteService.create(noteObject).then((returnedNote) => {\n      setNotes(notes.concat(returnedNote));\n      setNewNote(\"\");\n    });\n  };\n\n  const toggleImportanceOf = (id) => {\n    const note = notes.find((n) => n.id === id);\n    const changedNote = { ...note, important: !note.important };\n\n    noteService\n      .update(id, changedNote)\n      .then((returnedNote) => {\n        setNotes(notes.map((note) => (note.id !== id ? note : returnedNote)));\n      })\n      .catch((error) => {\n        setErrorMessage(\n          `Note '${note.content}' was already removed from server`\n        );\n        setTimeout(() => {\n          setErrorMessage(null);\n        }, 5000);\n        setNotes(notes.filter((n) => n.id !== id));\n      });\n  };\n\n  const handleNoteChange = (event) => {\n    console.log(event.target.value);\n    setNewNote(event.target.value);\n  };\n\n  const notesToShow = showAll ? notes : notes.filter((note) => note.important);\n\n  return (\n    <div>\n      <h1>Notes</h1>\n      <Notification message={errorMessage} />\n      <div>\n        <button onClick={() => setShowAll(!showAll)}>\n          show {showAll ? \"important\" : \"all\"}\n        </button>\n      </div>\n      <ul>\n        {notesToShow.map((note) => (\n          <Note\n            key={note.id}\n            note={note}\n            toggleImportance={() => toggleImportanceOf(note.id)}\n          />\n        ))}\n      </ul>\n      <form onSubmit={addNote}>\n        <input value={newNote} onChange={handleNoteChange} />\n        <button type=\"submit\">save</button>\n      </form>\n      <Footer />\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}